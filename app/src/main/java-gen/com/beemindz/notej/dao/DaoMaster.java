package com.beemindz.notej.dao;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.beemindz.notej.util.CommonUtils;
import com.beemindz.notej.util.Constant;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 2): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
  public static final int SCHEMA_VERSION = 4;

  public DaoMaster(SQLiteDatabase db) {
    super(db, SCHEMA_VERSION);
    registerDaoClass(TaskDao.class);
    registerDaoClass(TaskDraftDao.class);
  }

  /**
   * Creates underlying database table using DAOs.
   */
  public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
    TaskDao.createTable(db, ifNotExists);
    TaskDraftDao.createTable(db, ifNotExists);
  }

  /**
   * Drops underlying database table using DAOs.
   */
  public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
    TaskDao.dropTable(db, ifExists);
    TaskDraftDao.dropTable(db, ifExists);
  }

  public DaoSession newSession() {
    return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
  }

  public DaoSession newSession(IdentityScopeType type) {
    return new DaoSession(db, type, daoConfigMap);
  }

  public static abstract class OpenHelper extends SQLiteOpenHelper {

    public OpenHelper(Context context, String name, CursorFactory factory) {
      super(context, name, factory, SCHEMA_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
      Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
      createAllTables(db, false);
    }
  }

  /**
   * WARNING: Drops all table on Upgrade! Use only during development.
   */
  public static class DevOpenHelper extends OpenHelper {
    public DevOpenHelper(Context context, String name, CursorFactory factory) {
      super(context, name, factory);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
      Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");

      dropAllTables(db, true);
      onCreate(db);
      Cursor oldData = getOldData(db);
      if (oldData != null) {
        Log.d("Upgrade DB", "Insert DB to notej-db");
        oldData.moveToFirst();
        do {

          ContentValues values = new ContentValues();
          values.put(TaskDao.Properties.Id.columnName, oldData.getInt(oldData.getColumnIndex("_id")));
          values.put(TaskDao.Properties.TaskName.columnName, oldData.getString(oldData.getColumnIndex("name")));
          values.put(TaskDao.Properties.TaskDescription.columnName, oldData.getString(oldData.getColumnIndex("description")));

          values.put(TaskDao.Properties.IsReminder.columnName, oldData.getInt(oldData.getColumnIndex("isReminder")));
          values.put(TaskDao.Properties.IsComplete.columnName, oldData.getInt(oldData.getColumnIndex("isComplete")));
          values.put(TaskDao.Properties.IsDueDate.columnName, 0);

          String reminderDate = oldData.getString(oldData.getColumnIndex("reminderDate"));
          String createDate = oldData.getString(oldData.getColumnIndex("createdDate"));
          String updateDate = oldData.getString(oldData.getColumnIndex("updatedDate"));

          values.put(TaskDao.Properties.DueDate.columnName, System.currentTimeMillis());
          values.put(TaskDao.Properties.ReminderDate.columnName, CommonUtils.getTimeMillis(reminderDate, Constant.DATE_TIME_FORMAT));
          values.put(TaskDao.Properties.CreatedDate.columnName, CommonUtils.getTimeMillis(createDate, Constant.DATE_TIME_FORMAT));
          values.put(TaskDao.Properties.UpdatedDate.columnName, CommonUtils.getTimeMillis(updateDate, Constant.DATE_TIME_FORMAT));
          long id = db.insert(TaskDao.TABLENAME, null, values);
          values.put(TaskDraftDao.Properties.Id.columnName, id);
          values.put(TaskDraftDao.Properties.Status.columnName, Constant.TASK_DRAFT_STATUS_INSERT);
          db.insert(TaskDraftDao.TABLENAME, null, values);
        } while (oldData.moveToNext());
        String sqlDeleteTasks = "DROP TABLE " + (true ? "IF EXISTS " : "") + "'tasks'";
        String sqlDeleteTaskDrafts = "DROP TABLE " + (true ? "IF EXISTS " : "") + "'task_drafts'";
        db.execSQL(sqlDeleteTasks);
        db.execSQL(sqlDeleteTaskDrafts);
      }
    }

    public Cursor getOldData(SQLiteDatabase mytodoDB) {

      String sqlCheckExistTable = "SELECT name FROM sqlite_master WHERE type='table' AND name='tasks'";

      Cursor c = mytodoDB.rawQuery(sqlCheckExistTable, null);

      if (c.getCount() > 0) {

        String sql = "SELECT * FROM tasks";
        Cursor cursor = mytodoDB.rawQuery(sql, null);
        return cursor;
      }
      return null;
    }

  }

}

